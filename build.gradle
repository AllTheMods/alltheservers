plugins {
    id 'java'
    id 'distribution'
    id "org.jetbrains.kotlin.jvm" version "1.4.32"
    id "com.github.johnrengelman.shadow" version "6.1.0"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

repositories {
    mavenCentral()
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

distTar.enabled(false)

distributions {
    main {
        contents {
            from jar
            filesMatching("startserver.*") {
                filter { it.replaceAll("@@serverstarter-libVersion@@", version as String) }
            }
        }
    }
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'org.yaml:snakeyaml:1.28'
    implementation 'commons-io:commons-io:2.6'
    implementation 'com.google.code.gson:gson:2.8.4'
    implementation 'org.fusesource.jansi:jansi:1.17.1'

    testImplementation 'junit:junit:4.13.2'
}

tasks.build.dependsOn shadowJar
shadowJar {
    archiveClassifier.set('')
}

jar {
    manifest {
        attributes(
                'Main-Class': 'atm.bloodworkxgaming.serverstarter.ServerStarterKt'
        )
    }
}


task depsize {
    group = "help"
    doLast {
        def size = 0
        def formatStr = "%,10.2f"
        configurations.default.collect { it.length() / (1024 * 1024) }.each { size += it }

        def out = new StringBuffer()
        out << 'Total dependencies size:'.padRight(45)
        out << "${String.format(formatStr, size)} Mb\n\n"

        configurations
                .default
                .sort { -it.length() }
                .each {
            out << "${it.name}".padRight(45)
            out << "${String.format(formatStr, (it.length() / 1024))} kb\n"
        }
        println(out)
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}